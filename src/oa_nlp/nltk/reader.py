# openAccess: getPLoS
#
#Copyright (c) 2001-2012 openAccess Project
# Author: Bill OConnor
# URL: <https://github.com/openAccess/gitPLoS>
# For license information, see LICENSE.TXT

"""
    Description
    ===========

    PlosReader is loosely modeled on ntlk.corpus.api.CategorizedPlaintextCorpusReader.
    A corpus is generated by the mkcorpus tool which uses a Solr query to select 
    documents. Meta-data related to the corpus is contained in corpus_info.json.  
    
    In a sense there is no such thing as a definative PLoS corpus. A corpus can
    be created based on a set of selection criteria submitted to the Solr search
    server. The document doi, journal, authors, subjects, publication date, body, 
    abstract and URL to the original artilce XML are included in the meta-data. 
    The PlosReader provides access to this info as well as some standard methods 
    in nltk.readers.
"""
import json
from util import doi2fn, listafy
from nltk.corpus.reader.plaintext import  CategorizedPlaintextCorpusReader

class PlosReader(CategorizedPlaintextCorpusReader):
    """
    An NTLK compatible corpus reader. PLoS articles are identified by a Digital
    Object Identifier (DOI) and have a 'body' containing the text of the article 
    and a 'abstract'. Since working with abstracts and/or article bodies might be 
    useful both are incorporated into the corpus. The actual file identifiers are 
    follow the pattern 'DOI-doc_part.txt', where DOI is the article DOI with '/' 
    replaced by '-' and doc_part is either 'body' or 'abstract'. When a new 
    Plosreader is initialized the NLTK file identifiers are generateid using doc_part
    and DOIs. The NLTK super class is initialized using these ids. From that point on 
    PlosReader will have all the functionality of the CategorizedPlaintextCorpusReader.

    Other 

    """
    def __init__(self, root, **kwargs):
        """
	Initialize a PLoS reader with a specific corpus. Corpus 
	information is contained in 'root/corpus_info.json' file. The

        @type  root: string
	@param root: The directory path to the corpus directory.
        """
        self._root = root
        fp = open( '%s/corpus_info.json' % (root), 'r' )
        self._corpus_info = info = json.load(fp)
        fp.close()

        # doc_part is specific to PLoS and research article in general.
	# 'abstract' and 'body' are currently supported.
	# The corpus contains seperate text for each, but the 
	# reader is initialized to readi only one.
	if 'doc_part' in kwargs:
            self._doc_part = doc_part = kwargs['doc_part']
	    del kwargs['doc_part']
	else:
	    self._doc_part = doc_part = 'body'
	if 'fileids' not in kwargs:
            fileids = [ doi2fn(d, doc_part) for d in info['d2c'].keys() ] 
        else:
	    fileids =  kwargs['fileids']
        # cat_map f -> [ c1, c2, ...]
	# The fileids depend on what the doc_part is ('body', 'abstract')
	cat_map = {}
        for d,cat in info['d2c'].iteritems():
            cat_map[doi2fn(d, doc_part)] = cat

	kwargs['cat_map'] = cat_map
	# Subclass of Categorized Plaintext Corpus Reader
        CategorizedPlaintextCorpusReader.__init__(self, root, fileids, **kwargs)

    def dois(self):
        """
	"""
        return self._corpus_info['d2c'].keys()

    def articleURL(self, doi_lst=None):
        """
        """
	dois = listafy(doi_lst, self._corpus_info['d2c'])
	amap = self._corpus_info['article_link']
        return zip(dois, [ amap[d] for d in dois])

    def articleXML(self, doi_lst=None):
        """
        """
	dois = listafy(doi_lst, self._corpus_info['d2c'])
	xmap = self._corpus_info['xml_link']
        return zip(dois, [ xmap[d] for d in dois ])

    def doi2fid(self, doi_lst=None):
        """
        """
        dois = listafy(doi_lst, self._corpus_info['d2c']) 
        return zip(dois, doi2fn(dois, self._doc_part))

    def authors(self, doi_lst=None):
        """
        Build a list of (doi , author) tuples.
	"""
        dois = listafy(doi_lst, self._corpus_info['d2c'])
	d2info = self._corpus_info['d2info']
	alist = []
	for d in dois:
            (_,_,_,_,authors) = d2info[d]
	    alist.extend([ (d, a) for a in authors])
        return alist

    def pub_date(self, doi_lst=None):
        """
        """
        dois = listafy(doi_lst, self._corpus_info['d2c'])
	d2info = self._corpus_info['d2info']
	dlist = []
	for d in dois:
            (_,pd,_,_,_) = d2info[d] if d in d2info else (0,None,0,0,0) 
	    dlist.extend((d, pd))
        return dlist

    def article_type(self, doi_lst=None):
        """
        """
        dois = listafy(doi_lst, self._corpus_info['d2c'])
	d2info = self._corpus_info['d2info']
	alist = []
	for d in dois:
            (_,_,atype,_,_) = d2info[d] if d in d2info else (0,0,None,0,0) 
	    alist.extend((d, atype))
        return alist

    def title(self, doi_lst=None):
        """
        """
        dois = listafy(doi_lst, self._corpus_info['d2c'])
	d2info = self._corpus_info['d2info']
	tlist = []
	for d in dois:
            (_,_,_,t,_) = d2info[d]
	    tlist.extend((d, t))
        return tlist
